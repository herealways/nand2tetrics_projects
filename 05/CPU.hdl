// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	// A register
	And (a=instruction[15],b=instruction[5],out=d1);
	Mux16 (a=outA,b=ALUout,sel=d1,out=ALUoutOrNochange);
	Mux16 (a=instruction,b=ALUoutOrNochange,sel=instruction[15],out=A);
	ARegister (in=A,load=true,out[0..14]=addressM,out=outA); //A register	

	// A or M
	Mux16 (a=outA,b=inM,sel=instruction[12],out=ALUinputy);
	
	//D register
	And (a=instruction[15],b=instruction[4],out=d2);
	DRegister (in=ALUout,load=d2,out=ALUinputx); //D register
	
	//ALU
	ALU (x=ALUinputx,y=ALUinputy,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=ALUout,zr=ALUoutzr,ng=ALUoutng);
	
	// M register and writeM
	And (a=instruction[15],b=instruction[3],out=writeM,out=d3);
	Mux16 (a=inM,b=ALUout,sel=d3,out=outM);
	
	//PC
	Not (in=ALUoutng,out=JGE); //JGE
	And (a=ALUoutzr,b=ALUoutzr,out=JEQ); //JEQ
	And (a=ALUoutng,b=ALUoutng, out=JLT); //JLT
	Not (in=ALUoutzr, out=JNE); //JNE
	Or (a=JLT,b=JEQ, out=JLE); //JLE
	Not (in=JLE,out=JGT); //JGT
	
	Mux8Way (a=false,b=JGT,c=JEQ,d=JGE,e=JLT,f=JNE,g=JLE,h=true,sel=instruction[0..2],out=WhichJump);
	And (a=instruction[15],b=WhichJump,out=PCload); //only C instruction will jump
	PC (in=outA,inc=true,reset=reset,load=PCload,out=PCout,out[0..14]=pc);
	


	
	
}