class BattleSimulator {
    field int test; //in Jack, if a class has a constructor, we must provide a field

    constructor BattleSimulator new() {
        return this;
    }

    /** Let the fight begin*/
    method void fight(Monster competitor1, Monster competitor2) {
        var boolean complete;
        var int damage;
        var int competitor1Defense;
        var int competitor2Defense;
        let complete = false;
        let competitor1Defense = competitor1.getDefense();
        let competitor2Defense = competitor2.getDefense();

        while (~complete) {
            /** Competitor1 hits competitor2 */
            let damage = competitor1.hit(competitor2Defense);
            do competitor2.defense(damage);
            let complete = competitor2.check(); // Check if battle has completed
            do Sys.wait(1000);

            /** If battle is not complete, then let competitor2 hit competitor1 */
            if (~complete) {
                /** Competitor2 hits competitor1 */
                let damage = competitor2.hit(competitor1Defense);
                do competitor1.defense(damage);
                let complete = competitor1.check();
                do Sys.wait(1000);
                }
        }
        /*Dispose the instances after the fight*/
        do competitor1.dispose();
        do competitor2.dispose();
        return;
    }

    /**run the game*/
    method void run() {
        var char key;
        var Monster competitor1;
        var Monster competitor2;
        var int monster_code;
        var boolean exit;
        // waits for a key to be pressed
        while (~exit) {
            while (key = 0) {
                let key = Keyboard.keyPressed();
            }

            /**Set competitor1*/
            if (key = 49) { let competitor1 = Monster.new("Warrior", 100, 10, 10, 1, 100, 1);} //1 key 
            if (key = 50) { let competitor1 = Monster.new("Slime", 40, 20, 2, 2, 100, 1);} //2 key 
            if (key = 51) { let competitor1 = Monster.new("RockySlime", 20, 16, 16, 3, 100, 1);} //3 key
            if (key = 52) { let competitor1 = Monster.new("Skeleton", 25, 55, 0, 4, 100, 1);} //4 key
            if (key = 53) { let competitor1 = Monster.new("BigSlime", 350, 12, 0, 5, 100, 1);} //5 key
            if (key = 90) { let competitor1 = Monster.new("NEW_MONSTER", 666, 22, 11, 10, 100, 1);}

            /**Set competitor2*/
            if (key = 54) { let competitor2 = Monster.new("Warrior", 100, 10, 10, 1, 200, 2);} //6 key
            if (key = 55) { let competitor2 = Monster.new("Slime", 40, 20, 2, 2, 200, 2);} //7 key
            if (key = 56) { let competitor2 = Monster.new("RockySlime", 20, 16, 16, 3, 200, 2);} //8 key
            if (key = 57) { let competitor2 = Monster.new("Skeleton", 25, 55, 0, 4, 200, 2);} //9 key
            if (key = 48) { let competitor2 = Monster.new("BigSlime", 350, 12, 0, 5, 200, 2);} //0 key
            if (key = 88) { let competitor2 = Monster.new("NEW_MONSTER", 666, 22, 11, 10, 200, 2);}
             

            /** f for fight */
            if (key = 70 ) {do fight(competitor1, competitor2);} //F key
            if (key = 67) {do Screen.clearScreen();} //C key, clear the screen
            if (key = 81) {let exit = true;} //Q key, Quit the game

            // waits for the key to be released
            while (~(key = 0)) {
            let key = Keyboard.keyPressed();
            }
    }


        return;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
}